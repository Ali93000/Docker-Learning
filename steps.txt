
* To Dockerize our project
    1- add Dockerfile
    2- 



* to ignore files when image createing we can use .dockerignore files


* to sync between development and container (Hot Relaod) we can use Volumes when creating the container
    Bind Mount Volumes
    -v /Users/macbook/DockerLearning/App-Node:/app 
    example:-
        docker run --name express-node-app-container -v ${pwd}:/app -d -p 4000:4000 express-node-app 
    to make sync readonly (from dev to container not reverces?)
    docker run --name express-node-app-container -v ${pwd}:/app:ro -d -p 4000:4000 express-node-app 

    ${pwd} print path

 
 * use of DockerCompose
    1- create docker-compose.yml
    2- write all instructions to build container
    3- docker-compose up -d  (to build container using DockerCompose)
    4- docker-compose down (to shutdown container)



* to use environment varibles
    a- with docker file
        1- we can pass it in docker file  >>  ENV key=value
        2- we can pass it using commond line >>  --env key=value
            docker run --name express-node-app-container -d -v ${PWD}:/app:ro --env port=4000 --env Environment=development  -p 4000:4000 express-node-app 

        3- we can pass it in commond line from a file   >>  --env-file ./.env
            docker run --name express-node-app-container -d -v ${PWD}:/app:ro --env-file ./.env -p 4000:4000 express-node-app

    b- with DockerCompose 
        1- by add environment section
        2- by add env_file section to get them from file



* we can create docker-compose file foreach environment

* we ca create generic docker compose file then create a file foreach environment


* Working with Multi Stages
    1- in docker file we define all stages base, development, staging and production
    2- in DockerCompose file we pass target environment to create container 
        context: .
        target: production